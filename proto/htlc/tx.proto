syntax = "proto3";
package nucleus.htlc;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "nucleus/x/htlc/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the HTLC Msg service
service Msg {
  // CreateHTLC defines a method for creating a HTLC
  rpc CreateHTLC(MsgCreateHTLC) returns (MsgCreateHTLCResponse);

  // ClaimHTLC defines a method for claiming a HTLC
  rpc ClaimHTLC(MsgClaimHTLC) returns (MsgClaimHTLCResponse);
}

// MsgCreateHTLC defines a message to create an HTLC
message MsgCreateHTLC {
  option (gogoproto.equal) = true;

  string sender = 1;
  string to = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string hash_lock = 4 [ (gogoproto.moretags) = "yaml:\"hash_lock\"" ];
  uint64 timestamp = 5;
  uint64 time_lock = 6 [ (gogoproto.moretags) = "yaml:\"time_lock\"" ];
}

// MsgCreateHTLCResponse defines the Msg/CreateHTLC response type
message MsgCreateHTLCResponse { string id = 1; }

// MsgClaimHTLC defines a message to claim an HTLC
message MsgClaimHTLC {
  option (gogoproto.equal) = true;

  string sender = 1;
  string id = 2 [ (gogoproto.moretags) = "yaml:\"id\"" ];
  string secret = 3;
}

// MsgClaimHTLCResponse defines the Msg/ClaimHTLC response type
message MsgClaimHTLCResponse {}
