// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: htlc/htlc.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HTLCState defines the state of an HTLC
type HTLCState int32

const (
	// HTLC_STATE_OPEN defines an open state.
	Open HTLCState = 0
	// HTLC_STATE_COMPLETED defines a completed state.
	Completed HTLCState = 1
	// HTLC_STATE_REFUNDED defines a refunded state.
	Refunded HTLCState = 2
)

var HTLCState_name = map[int32]string{
	0: "HTLC_STATE_OPEN",
	1: "HTLC_STATE_COMPLETED",
	2: "HTLC_STATE_REFUNDED",
}

var HTLCState_value = map[string]int32{
	"HTLC_STATE_OPEN":      0,
	"HTLC_STATE_COMPLETED": 1,
	"HTLC_STATE_REFUNDED":  2,
}

func (x HTLCState) String() string {
	return proto.EnumName(HTLCState_name, int32(x))
}

func (HTLCState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{0}
}

// HTLC defines the struct of an HTLC
type HTLC struct {
	Id               string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender           string                                   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	To               string                                   `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	HashLock         string                                   `protobuf:"bytes,7,opt,name=hash_lock,json=hashLock,proto3" json:"hash_lock,omitempty" yaml:"hash_lock"`
	Secret           string                                   `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	Timestamp        uint64                                   `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExpirationHeight uint64                                   `protobuf:"varint,10,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty" yaml:"expiration_height"`
	State            HTLCState                                `protobuf:"varint,11,opt,name=state,proto3,enum=nucleus.htlc.HTLCState" json:"state,omitempty"`
	ClosedBlock      uint64                                   `protobuf:"varint,12,opt,name=closed_block,json=closedBlock,proto3" json:"closed_block,omitempty" yaml:"closed_block"`
}

func (m *HTLC) Reset()         { *m = HTLC{} }
func (m *HTLC) String() string { return proto.CompactTextString(m) }
func (*HTLC) ProtoMessage()    {}
func (*HTLC) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{0}
}
func (m *HTLC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTLC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTLC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTLC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTLC.Merge(m, src)
}
func (m *HTLC) XXX_Size() int {
	return m.Size()
}
func (m *HTLC) XXX_DiscardUnknown() {
	xxx_messageInfo_HTLC.DiscardUnknown(m)
}

var xxx_messageInfo_HTLC proto.InternalMessageInfo

type AssetSupply struct {
	IncomingSupply           types.Coin    `protobuf:"bytes,1,opt,name=incoming_supply,json=incomingSupply,proto3" json:"incoming_supply" yaml:"incoming_supply"`
	OutgoingSupply           types.Coin    `protobuf:"bytes,2,opt,name=outgoing_supply,json=outgoingSupply,proto3" json:"outgoing_supply" yaml:"assetoutgoing_supply_params"`
	CurrentSupply            types.Coin    `protobuf:"bytes,3,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply" yaml:"current_supply"`
	TimeLimitedCurrentSupply types.Coin    `protobuf:"bytes,4,opt,name=time_limited_current_supply,json=timeLimitedCurrentSupply,proto3" json:"time_limited_current_supply" yaml:"time_limited_current_supply"`
	TimeElapsed              time.Duration `protobuf:"bytes,5,opt,name=time_elapsed,json=timeElapsed,proto3,stdduration" json:"time_elapsed" yaml:"time_elapsed"`
}

func (m *AssetSupply) Reset()         { *m = AssetSupply{} }
func (m *AssetSupply) String() string { return proto.CompactTextString(m) }
func (*AssetSupply) ProtoMessage()    {}
func (*AssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{1}
}
func (m *AssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetSupply.Merge(m, src)
}
func (m *AssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *AssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_AssetSupply proto.InternalMessageInfo

// Params defines token module's parameters
type Params struct {
	AssetParams []AssetParam `protobuf:"bytes,1,rep,name=asset_params,json=assetParams,proto3" json:"asset_params" yaml:"asset_params"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type AssetParam struct {
	Denom         string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	SupplyLimit   SupplyLimit                            `protobuf:"bytes,2,opt,name=supply_limit,json=supplyLimit,proto3" json:"supply_limit" yaml:"supply_limit"`
	Active        bool                                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	DeputyAddress string                                 `protobuf:"bytes,4,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty" yaml:"deputy_address"`
	FixedFee      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=fixed_fee,json=fixedFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fixed_fee"`
	MinSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_swap_amount,json=minSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_swap_amount"`
	MaxSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=max_swap_amount,json=maxSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_swap_amount"`
	MinBlockLock  uint64                                 `protobuf:"varint,8,opt,name=min_block_lock,json=minBlockLock,proto3" json:"min_block_lock,omitempty" yaml:"min_block_lock"`
	MaxBlockLock  uint64                                 `protobuf:"varint,9,opt,name=max_block_lock,json=maxBlockLock,proto3" json:"max_block_lock,omitempty" yaml:"max_block_lock"`
}

func (m *AssetParam) Reset()      { *m = AssetParam{} }
func (*AssetParam) ProtoMessage() {}
func (*AssetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{3}
}
func (m *AssetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetParam.Merge(m, src)
}
func (m *AssetParam) XXX_Size() int {
	return m.Size()
}
func (m *AssetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetParam.DiscardUnknown(m)
}

var xxx_messageInfo_AssetParam proto.InternalMessageInfo

type SupplyLimit struct {
	Limit          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=limit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit"`
	TimeLimited    bool                                   `protobuf:"varint,2,opt,name=time_limited,json=timeLimited,proto3" json:"time_limited,omitempty" yaml:"time_limited"`
	TimePeriod     time.Duration                          `protobuf:"bytes,3,opt,name=time_period,json=timePeriod,proto3,stdduration" json:"time_period" yaml:"time_period"`
	TimeBasedLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=time_based_limit,json=timeBasedLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"time_based_limit"`
}

func (m *SupplyLimit) Reset()      { *m = SupplyLimit{} }
func (*SupplyLimit) ProtoMessage() {}
func (*SupplyLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c03699801a204f8b, []int{4}
}
func (m *SupplyLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyLimit.Merge(m, src)
}
func (m *SupplyLimit) XXX_Size() int {
	return m.Size()
}
func (m *SupplyLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyLimit proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("nucleus.htlc.HTLCState", HTLCState_name, HTLCState_value)
	proto.RegisterType((*HTLC)(nil), "nucleus.htlc.HTLC")
	proto.RegisterType((*AssetSupply)(nil), "nucleus.htlc.AssetSupply")
	proto.RegisterType((*Params)(nil), "nucleus.htlc.Params")
	proto.RegisterType((*AssetParam)(nil), "nucleus.htlc.AssetParam")
	proto.RegisterType((*SupplyLimit)(nil), "nucleus.htlc.SupplyLimit")
}

func init() { proto.RegisterFile("htlc/htlc.proto", fileDescriptor_c03699801a204f8b) }

var fileDescriptor_c03699801a204f8b = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x4f, 0x1b, 0xc7,
	0x1b, 0xf7, 0x1a, 0x43, 0xec, 0xb1, 0x31, 0xfe, 0x0f, 0xfc, 0x93, 0x8d, 0x93, 0xec, 0x5a, 0x2b,
	0xb5, 0x45, 0x91, 0xb2, 0x2e, 0xf4, 0xc6, 0xa5, 0x65, 0xc1, 0x51, 0xa2, 0xd2, 0x80, 0x16, 0x5a,
	0xa5, 0x91, 0xaa, 0xd5, 0x78, 0x77, 0xb0, 0x57, 0xec, 0xee, 0xac, 0x3c, 0xb3, 0x89, 0xb9, 0xf5,
	0xd0, 0x43, 0xc5, 0xa9, 0xc7, 0x5c, 0x90, 0x22, 0xf5, 0x52, 0xf5, 0x93, 0x70, 0x6b, 0x8e, 0x55,
	0x0f, 0x4e, 0x0a, 0x97, 0x9e, 0xf9, 0x04, 0xd5, 0xbc, 0xd8, 0x5e, 0x13, 0x35, 0x69, 0xb9, 0xc0,
	0x3e, 0x6f, 0xbf, 0xdf, 0x33, 0xcf, 0x1b, 0x80, 0xa5, 0x3e, 0x8b, 0xfc, 0x36, 0xff, 0x61, 0xa7,
	0x03, 0xc2, 0x08, 0xac, 0x25, 0x99, 0x1f, 0xe1, 0x8c, 0xda, 0x5c, 0xd7, 0x34, 0x7c, 0x42, 0x63,
	0x42, 0xdb, 0x5d, 0x44, 0x71, 0xfb, 0xf9, 0x5a, 0x17, 0x33, 0xb4, 0xd6, 0xf6, 0x49, 0x98, 0x48,
	0xef, 0xe6, 0x4a, 0x8f, 0xf4, 0x88, 0xf8, 0x6c, 0xf3, 0x2f, 0xa5, 0x35, 0x7a, 0x84, 0xf4, 0x22,
	0xdc, 0x16, 0x52, 0x37, 0x3b, 0x6c, 0x07, 0xd9, 0x00, 0xb1, 0x90, 0xa8, 0x28, 0xeb, 0x6c, 0x0e,
	0x94, 0x1e, 0x1d, 0xec, 0x6c, 0xc1, 0x3a, 0x28, 0x86, 0x81, 0xae, 0xb5, 0xb4, 0xd5, 0x8a, 0x5b,
	0x0c, 0x03, 0x78, 0x13, 0x2c, 0x50, 0x9c, 0x04, 0x78, 0xa0, 0x17, 0x85, 0x4e, 0x49, 0xdc, 0x8f,
	0x11, 0x7d, 0x4e, 0xfa, 0x31, 0x02, 0x7d, 0xb0, 0x80, 0x62, 0x92, 0x25, 0x4c, 0x5f, 0x68, 0xcd,
	0xad, 0x56, 0xd7, 0x6f, 0xdb, 0x32, 0x4f, 0x9b, 0xe7, 0x69, 0xab, 0x3c, 0xed, 0x2d, 0x12, 0x26,
	0xce, 0xa7, 0x67, 0x23, 0xb3, 0xf0, 0xeb, 0x1b, 0x73, 0xb5, 0x17, 0xb2, 0x7e, 0xd6, 0xb5, 0x7d,
	0x12, 0xb7, 0xd5, 0xa3, 0xe4, 0xaf, 0x07, 0x34, 0x38, 0x6a, 0xb3, 0xe3, 0x14, 0x53, 0x11, 0x40,
	0x5d, 0x05, 0x0d, 0xd7, 0x40, 0xa5, 0x8f, 0x68, 0xdf, 0x8b, 0x88, 0x7f, 0xa4, 0xdf, 0xe0, 0xdc,
	0xce, 0xca, 0xe5, 0xc8, 0x6c, 0x1c, 0xa3, 0x38, 0xda, 0xb0, 0x26, 0x26, 0xcb, 0x2d, 0xf3, 0xef,
	0x1d, 0xe2, 0x1f, 0xc9, 0xfc, 0xfd, 0x01, 0x66, 0x7a, 0x79, 0x9c, 0x3f, 0x97, 0xe0, 0x5d, 0x50,
	0x61, 0x61, 0x8c, 0x29, 0x43, 0x71, 0xaa, 0x57, 0x5a, 0xda, 0x6a, 0xc9, 0x9d, 0x2a, 0xe0, 0x63,
	0xf0, 0x3f, 0x3c, 0x4c, 0x43, 0x59, 0x22, 0xaf, 0x8f, 0xc3, 0x5e, 0x9f, 0xe9, 0x80, 0x7b, 0x39,
	0x77, 0x2f, 0x47, 0xa6, 0x2e, 0x09, 0xdf, 0x71, 0xb1, 0xdc, 0xc6, 0x54, 0xf7, 0x48, 0xa8, 0xe0,
	0x03, 0x30, 0x4f, 0x19, 0x62, 0x58, 0xaf, 0xb6, 0xb4, 0xd5, 0xfa, 0xfa, 0x2d, 0x3b, 0xdf, 0x4d,
	0x9b, 0xd7, 0x7c, 0x9f, 0x9b, 0x5d, 0xe9, 0x05, 0x37, 0x40, 0xcd, 0x8f, 0x08, 0xc5, 0x81, 0xd7,
	0x15, 0xaf, 0xac, 0x09, 0xd2, 0x5b, 0x97, 0x23, 0x73, 0x59, 0x92, 0xe6, 0xad, 0x96, 0x5b, 0x95,
	0xa2, 0xc3, 0xa5, 0x8d, 0xd2, 0x5f, 0xaf, 0x4c, 0xcd, 0xfa, 0xa5, 0x04, 0xaa, 0x9b, 0x94, 0x62,
	0xb6, 0x9f, 0xa5, 0x69, 0x74, 0x0c, 0xbb, 0x60, 0x29, 0x4c, 0x7c, 0x12, 0x87, 0x49, 0xcf, 0xa3,
	0x42, 0x25, 0xda, 0xfb, 0xde, 0x16, 0x19, 0xbc, 0x45, 0x97, 0x23, 0xf3, 0xa6, 0xe4, 0xbc, 0x12,
	0x6f, 0xb9, 0xf5, 0xb1, 0x46, 0x71, 0x24, 0x60, 0x89, 0x64, 0xac, 0x47, 0x72, 0x1c, 0xc5, 0x0f,
	0x71, 0xdc, 0x57, 0x1c, 0x96, 0xe4, 0x40, 0x3c, 0xe5, 0x2b, 0x20, 0x5e, 0x8a, 0x06, 0x28, 0xa6,
	0x96, 0x5b, 0x1f, 0x1b, 0x14, 0x9f, 0x07, 0xea, 0x7e, 0x36, 0x18, 0xe0, 0x84, 0x8d, 0xe9, 0xe6,
	0x3e, 0x44, 0x77, 0x4f, 0xd1, 0xfd, 0x5f, 0x95, 0x71, 0x26, 0xdc, 0x72, 0x17, 0x95, 0x42, 0x11,
	0xfc, 0xa0, 0x81, 0x3b, 0x7c, 0x1c, 0xbc, 0x28, 0x8c, 0x43, 0x86, 0x03, 0xef, 0x0a, 0x5d, 0xe9,
	0x3f, 0xbe, 0xee, 0x3d, 0x58, 0x96, 0xab, 0x73, 0xeb, 0x8e, 0x34, 0x6e, 0xcd, 0xa4, 0xf1, 0x1d,
	0xa8, 0x89, 0x48, 0x1c, 0xa1, 0x94, 0xe2, 0x40, 0x9f, 0x57, 0xb4, 0x72, 0x9b, 0xed, 0xf1, 0x36,
	0xdb, 0xdb, 0x6a, 0x9b, 0x1d, 0x53, 0xd1, 0x2e, 0xe7, 0x68, 0x55, 0xb0, 0xf5, 0xf2, 0x8d, 0xa9,
	0xb9, 0x55, 0xae, 0xea, 0x28, 0x4d, 0x04, 0x16, 0xf6, 0x44, 0x85, 0xe1, 0x53, 0x50, 0x13, 0x0d,
	0x50, 0x15, 0xd7, 0x35, 0xb1, 0xc4, 0xfa, 0xec, 0xb0, 0x8a, 0xa9, 0x12, 0x01, 0xce, 0x9d, 0x59,
	0x9e, 0x7c, 0xac, 0xe5, 0x56, 0xd1, 0xc4, 0x91, 0x6e, 0x94, 0x5f, 0xbe, 0x32, 0x0b, 0x62, 0x30,
	0xdf, 0x96, 0x00, 0x98, 0x42, 0xc0, 0x15, 0x30, 0x1f, 0xe0, 0x84, 0xc4, 0xea, 0xd8, 0x48, 0x01,
	0x7e, 0x0b, 0x6a, 0xaa, 0xf7, 0xa2, 0x5a, 0x93, 0x31, 0x9a, 0x49, 0x44, 0x56, 0x47, 0x54, 0xec,
	0x6a, 0x26, 0xf9, 0x60, 0xcb, 0xad, 0xd2, 0xa9, 0x27, 0x3f, 0x05, 0xc8, 0x67, 0xe1, 0x73, 0x2c,
	0x86, 0xa5, 0xec, 0x2a, 0x09, 0x7e, 0x01, 0xea, 0x01, 0x4e, 0x33, 0x76, 0xec, 0xa1, 0x20, 0x18,
	0x60, 0x4a, 0x45, 0x77, 0x2b, 0xce, 0xed, 0xe9, 0xb4, 0xcc, 0xda, 0x2d, 0x77, 0x51, 0x2a, 0x36,
	0xa5, 0x0c, 0xbf, 0x04, 0x95, 0xc3, 0x70, 0x88, 0x03, 0xef, 0x10, 0x63, 0xd1, 0xa3, 0x8a, 0x63,
	0xf3, 0xb4, 0xfe, 0x18, 0x99, 0x1f, 0xff, 0x8b, 0x23, 0xf7, 0x38, 0x61, 0x6e, 0x59, 0x00, 0x3c,
	0xc4, 0x18, 0x7e, 0x03, 0x96, 0xe2, 0x30, 0xf1, 0xe8, 0x0b, 0x94, 0x7a, 0x93, 0x93, 0x7a, 0x1d,
	0xc8, 0xc5, 0x38, 0x4c, 0xf6, 0x5f, 0xa0, 0x74, 0x53, 0x1e, 0x4f, 0x8e, 0x8b, 0x86, 0x33, 0xb8,
	0x37, 0xae, 0x89, 0x8b, 0x86, 0x39, 0xdc, 0xcf, 0x41, 0x9d, 0xe7, 0x2b, 0x0e, 0x92, 0xbc, 0xcc,
	0x65, 0x71, 0xb3, 0x72, 0xe5, 0x9b, 0xb5, 0x5b, 0x6e, 0x2d, 0x0e, 0x13, 0x71, 0xb2, 0xc4, 0x89,
	0xe6, 0x00, 0x68, 0x98, 0x07, 0xa8, 0xbc, 0x03, 0x30, 0x63, 0xe7, 0x00, 0x68, 0x38, 0x01, 0xc8,
	0x8d, 0xd8, 0x6f, 0x45, 0x50, 0xcd, 0x0d, 0x07, 0xdc, 0x06, 0xf3, 0x72, 0x8c, 0xb4, 0x6b, 0xbd,
	0x54, 0x06, 0xf3, 0x9b, 0x9c, 0xdf, 0x5f, 0x31, 0x93, 0xe5, 0xfc, 0x4d, 0xce, 0x5b, 0x2d, 0xb9,
	0x62, 0x6a, 0x9d, 0xe1, 0x33, 0x20, 0x44, 0x2f, 0xc5, 0x83, 0x90, 0x04, 0x93, 0x33, 0xf5, 0x8f,
	0x0b, 0x3c, 0xbe, 0xbc, 0x30, 0x87, 0x2c, 0x63, 0xe5, 0xfe, 0x02, 0xae, 0xd9, 0x13, 0x0a, 0xf8,
	0x14, 0x34, 0x84, 0x9d, 0x5f, 0x9f, 0x40, 0xed, 0x4b, 0xe9, 0x5a, 0x0f, 0xad, 0x73, 0x1c, 0x87,
	0xc3, 0x88, 0xbc, 0xa7, 0x15, 0xbd, 0xff, 0xbd, 0x06, 0x2a, 0x93, 0x3f, 0x52, 0xf0, 0x1e, 0x58,
	0xe2, 0x82, 0xb7, 0x7f, 0xb0, 0x79, 0xd0, 0xf1, 0x76, 0xf7, 0x3a, 0x4f, 0x1a, 0x85, 0x66, 0xf9,
	0xe4, 0xb4, 0x55, 0xda, 0x4d, 0x71, 0x02, 0x3f, 0x01, 0x2b, 0x39, 0xf3, 0xd6, 0xee, 0x57, 0x7b,
	0x3b, 0x9d, 0x83, 0xce, 0x76, 0x43, 0x6b, 0x2e, 0x9e, 0x9c, 0xb6, 0x2a, 0x5b, 0x24, 0x4e, 0x23,
	0xcc, 0xab, 0xf2, 0x11, 0x58, 0xce, 0x39, 0xba, 0x9d, 0x87, 0x5f, 0x3f, 0xd9, 0xee, 0x6c, 0x37,
	0x8a, 0xcd, 0xda, 0xc9, 0x69, 0xab, 0xec, 0xe2, 0xc3, 0x2c, 0x09, 0x70, 0xd0, 0x2c, 0xfd, 0xf8,
	0xb3, 0x51, 0x70, 0xd6, 0xcf, 0xfe, 0x34, 0x0a, 0x67, 0xe7, 0x86, 0xf6, 0xfa, 0xdc, 0xd0, 0xde,
	0x9e, 0x1b, 0xda, 0x4f, 0x17, 0x46, 0xe1, 0xf5, 0x85, 0x51, 0xf8, 0xfd, 0xc2, 0x28, 0x3c, 0x5b,
	0x51, 0x97, 0xa1, 0x3d, 0x14, 0xff, 0x33, 0xc9, 0x47, 0x75, 0x17, 0x44, 0x65, 0x3f, 0xfb, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x6f, 0x94, 0xef, 0x32, 0x4d, 0x09, 0x00, 0x00,
}

func (this *HTLC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTLC)
	if !ok {
		that2, ok := that.(HTLC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if len(this.Amount) != len(that1.Amount) {
		return false
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return false
		}
	}
	if this.HashLock != that1.HashLock {
		return false
	}
	if this.Secret != that1.Secret {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.ExpirationHeight != that1.ExpirationHeight {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.ClosedBlock != that1.ClosedBlock {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AssetParams) != len(that1.AssetParams) {
		return false
	}
	for i := range this.AssetParams {
		if !this.AssetParams[i].Equal(&that1.AssetParams[i]) {
			return false
		}
	}
	return true
}
func (this *AssetParam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssetParam)
	if !ok {
		that2, ok := that.(AssetParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.SupplyLimit.Equal(&that1.SupplyLimit) {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.DeputyAddress != that1.DeputyAddress {
		return false
	}
	if !this.FixedFee.Equal(that1.FixedFee) {
		return false
	}
	if !this.MinSwapAmount.Equal(that1.MinSwapAmount) {
		return false
	}
	if !this.MaxSwapAmount.Equal(that1.MaxSwapAmount) {
		return false
	}
	if this.MinBlockLock != that1.MinBlockLock {
		return false
	}
	if this.MaxBlockLock != that1.MaxBlockLock {
		return false
	}
	return true
}
func (this *SupplyLimit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupplyLimit)
	if !ok {
		that2, ok := that.(SupplyLimit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Limit.Equal(that1.Limit) {
		return false
	}
	if this.TimeLimited != that1.TimeLimited {
		return false
	}
	if this.TimePeriod != that1.TimePeriod {
		return false
	}
	if !this.TimeBasedLimit.Equal(that1.TimeBasedLimit) {
		return false
	}
	return true
}
func (m *HTLC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTLC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTLC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosedBlock != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.ClosedBlock))
		i--
		dAtA[i] = 0x60
	}
	if m.State != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x58
	}
	if m.ExpirationHeight != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.HashLock) > 0 {
		i -= len(m.HashLock)
		copy(dAtA[i:], m.HashLock)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.HashLock)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHtlc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimeElapsed, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintHtlc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TimeLimitedCurrentSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CurrentSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutgoingSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.IncomingSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for iNdEx := len(m.AssetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHtlc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBlockLock != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.MaxBlockLock))
		i--
		dAtA[i] = 0x48
	}
	if m.MinBlockLock != 0 {
		i = encodeVarintHtlc(dAtA, i, uint64(m.MinBlockLock))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.MaxSwapAmount.Size()
		i -= size
		if _, err := m.MaxSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MinSwapAmount.Size()
		i -= size
		if _, err := m.MinSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.FixedFee.Size()
		i -= size
		if _, err := m.FixedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DeputyAddress) > 0 {
		i -= len(m.DeputyAddress)
		copy(dAtA[i:], m.DeputyAddress)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.DeputyAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.SupplyLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintHtlc(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplyLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TimeBasedLimit.Size()
		i -= size
		if _, err := m.TimeBasedLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintHtlc(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	if m.TimeLimited {
		i--
		if m.TimeLimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Limit.Size()
		i -= size
		if _, err := m.Limit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHtlc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintHtlc(dAtA []byte, offset int, v uint64) int {
	offset -= sovHtlc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HTLC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovHtlc(uint64(l))
		}
	}
	l = len(m.HashLock)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovHtlc(uint64(m.Timestamp))
	}
	if m.ExpirationHeight != 0 {
		n += 1 + sovHtlc(uint64(m.ExpirationHeight))
	}
	if m.State != 0 {
		n += 1 + sovHtlc(uint64(m.State))
	}
	if m.ClosedBlock != 0 {
		n += 1 + sovHtlc(uint64(m.ClosedBlock))
	}
	return n
}

func (m *AssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IncomingSupply.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = m.OutgoingSupply.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = m.CurrentSupply.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = m.TimeLimitedCurrentSupply.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed)
	n += 1 + l + sovHtlc(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for _, e := range m.AssetParams {
			l = e.Size()
			n += 1 + l + sovHtlc(uint64(l))
		}
	}
	return n
}

func (m *AssetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	l = m.SupplyLimit.Size()
	n += 1 + l + sovHtlc(uint64(l))
	if m.Active {
		n += 2
	}
	l = len(m.DeputyAddress)
	if l > 0 {
		n += 1 + l + sovHtlc(uint64(l))
	}
	l = m.FixedFee.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = m.MinSwapAmount.Size()
	n += 1 + l + sovHtlc(uint64(l))
	l = m.MaxSwapAmount.Size()
	n += 1 + l + sovHtlc(uint64(l))
	if m.MinBlockLock != 0 {
		n += 1 + sovHtlc(uint64(m.MinBlockLock))
	}
	if m.MaxBlockLock != 0 {
		n += 1 + sovHtlc(uint64(m.MaxBlockLock))
	}
	return n
}

func (m *SupplyLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Limit.Size()
	n += 1 + l + sovHtlc(uint64(l))
	if m.TimeLimited {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod)
	n += 1 + l + sovHtlc(uint64(l))
	l = m.TimeBasedLimit.Size()
	n += 1 + l + sovHtlc(uint64(l))
	return n
}

func sovHtlc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHtlc(x uint64) (n int) {
	return sovHtlc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HTLC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTLC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTLC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashLock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashLock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= HTLCState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBlock", wireType)
			}
			m.ClosedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHtlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHtlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncomingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitedCurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeLimitedCurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeElapsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimeElapsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHtlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHtlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetParams = append(m.AssetParams, AssetParam{})
			if err := m.AssetParams[len(m.AssetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHtlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHtlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SupplyLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeputyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBlockLock", wireType)
			}
			m.MinBlockLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBlockLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockLock", wireType)
			}
			m.MaxBlockLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlockLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHtlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHtlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimited = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBasedLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHtlc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHtlc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeBasedLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHtlc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHtlc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHtlc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHtlc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHtlc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHtlc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHtlc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHtlc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHtlc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHtlc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHtlc = fmt.Errorf("proto: unexpected end of group")
)
